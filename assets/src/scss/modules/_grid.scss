/* ==========================================================================
   PSDGator SCSS Styles [GRID]
   ========================================================================== */

.row {
	display: flex;
	flex-wrap: wrap;

	&--hcenter {
		justify-content: center;
	}

	&--vcenter {
		align-items: center;
	}
}
.align-center {
	align-items: center !important;
}
.justify-end {
	justify-content: flex-end !important;
}
.justify-start {
	justify-content: flex-start !important;
}
.justify-between {
	justify-content: space-between !important;
}
/**
 * A small hack so we don't have to include max-width
 * with the appropriate percentage everywhere (less file size)
 *
 * Generally it works but it seems to fail when a col is
 * alone in its row (it will expand to 100%)
 */
// [class^="col"] {
//   min-width: 0;
// }

/**
 * Builders
 */

@mixin columnsBuilder($media: "") {
	@if $media != "" {
		$media: "-#{$media}";
	}

	.col#{$media} {
		flex: 1;
		max-width: 100%;
	}

	.col#{$media}-auto {
		flex: auto;
		max-width: 100%;
		width: auto;
	}

	/* Generate all column/offset classes */
	@for $i from 1 through $grid-columns {
		.col#{$media}-#{$i} {
			flex: percentage($i / $grid-columns);
			max-width: percentage($i / $grid-columns);
		}

		@if $grid-offsets {
			.off#{$media}-#{$i} {
				margin-left: percentage($i / $grid-columns);
			}
		}
	}

	/* Generate the extra classes */
	@each $cname, $cper in $columns-extra {
		.col#{$media}-#{$cname} {
			flex: $cper;
			max-width: $cper;
		}
	}
}
@mixin margins_paddings_builder($media: "") {
	@if $media != "" {
		$media: "-#{$media}";
	}

	/* Generate all gap classes */
	@each $dName, $dValue in $margins-paddings {
		.mb#{$media}-#{$dName} {
			margin-bottom: $dValue !important;
		}
		.mt#{$media}-#{$dName} {
			margin-top: $dValue !important;
		}
		.ml#{$media}-#{$dName} {
			margin-left: $dValue !important;
		}
		.mr#{$media}-#{$dName} {
			margin-right: $dValue !important;
		}
		.pb#{$media}-#{$dName} {
			padding-bottom: $dValue !important;
		}
		.pt#{$media}-#{$dName} {
			padding-top: $dValue !important;
		}
		.pl#{$media}-#{$dName} {
			padding-left: $dValue !important;
		}
		.pr#{$media}-#{$dName} {
			padding-right: $dValue !important;
		}
	}
}
@mixin gapsBuilder($media: "") {
	@if $media != "" {
		$media: "-#{$media}";
	}

	/* Generate all gap classes */
	@each $gName, $gValue in $grid-gaps {
		.gap#{$media}-#{$gName},
		.gap#{$media}-#{$gName}-x {
			margin-left: -$gValue;
			& > * {
				padding-left: $gValue;
			}
		}

		.gap#{$media}-#{$gName},
		.gap#{$media}-#{$gName}-y {
			margin-top: -$gValue;
			& > * {
				padding-top: $gValue;
			}
		}
	}
}
.fb-md-100 {
	flex-basis: 100% !important;
}

/**
 * Generate everything
 */

@include columnsBuilder;
@include gapsBuilder;
@include margins_paddings_builder;

/* Generate all responsive steps */
@each $bname, $bvalue in $breakpoints {
	@media screen and (#{$media-var}-width: $bvalue) {
		@include columnsBuilder($bname);
		@include gapsBuilder($bname);
		@include margins_paddings_builder($bname);
		.reset-#{$bname} {
			margin-left: 0;
		}
	}
}
